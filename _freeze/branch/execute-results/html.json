{
  "hash": "b4a74dd8c4e9c420baa37651e978068e",
  "result": {
    "markdown": "## Branching and Model Development {#sec-branch}\n\n\n::: {.cell}\n\n:::\n\n\nThe intermediate Git workflow introduces a new concept: branches. Efficient use of branches and a well thought out branching strategy will aid the analyst in Git use and is also a powerful tool for model development.\n\n### Branches and Branch strategy\n\nIn Git a branch is a pointer to a specific commit or set of commits which allow you to separate model development tasks into smaller subunits. I learned branching from [this guy](https://nvie.com/posts/a-successful-git-branching-model/) and in what follows I simplify his workflow into something that works well for complicated fisheries analyses. Let's start by creating a new branch named `develop` using the command `git checkout`. The argument `-b` tells Git to checkout a new branch while the arguments `develop` and `main` tell Git the name of the new branch and that the new branch should branch from the `main` branch.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (main)\n$ git checkout -b develop main\nSwitched to a new branch 'develop'\n```\n:::\n\n\nThe core concept in the Git Flow branching strategy is to always have two active branches; `main` and `develop`. The `main` branch is stable in that you make limited commits to it and those commits are associated with internal or external reporting including FDS reports, BOF memos, or conference presentations. Because the `main` branch will largely be static interested collaborators can quickly identify the analysis at the time periods where the analysis was reported.\n\nThe `develop` branch is the working branch and will have frequent commits relative to analysis progress. The `develop` branch merges into `main` at reporting periods and is the one branched from whenever a new feature is being developed.\n\nFeature branches are created frequently as new features are envisioned and developed. A best practice is to create a new feature branch, with a descriptive name, every time you create a new feature. When the feature is completed it is merged back into develop, left as a record without a merge, or deleted. In my work, feature branches are mostly merged back into develop, and this occurs whenever I create a feature which improves the analysis. Feature branches are left unmerged when I want to retain a record of having tried something (and the result) but do not think it improves the overall analysis. Feature branches are deleted without merging when something just did not work out and is also not worth retaining as a record. Notice that liberal use of feature branches keep the `main` and `develop` branches clean and can isolate those two primary branches of a lot of the sloppiness that is a byproduct of actively engaging in the scientific process.\n\nLet's practice Git Flow. In the terminal session which follows we create a new branch called `cleanup` with `git checkout`. On the new branch we modify modify the file `fib_seq.R` by deleting several lines of manual Fibonacci sequence calculations and replacing them with a for loop.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git checkout -b cleanup develop\nSwitched to a new branch 'cleanup'\n```\n:::\n\n\nCalling `git status` shows that the `cleanup` branch now contains upstaged changes.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (cleanup)\n$ git status\nOn branch cleanup\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   fib_seq.R\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n:::\n\n\nWe can view those changes using `git diff`.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (cleanup)\n$ git diff\ndiff --git a/fib_seq.R b/fib_seq.R\nindex 984a0a5..97be5b3 100644\n--- a/fib_seq.R\n+++ b/fib_seq.R\n@@ -2,12 +2,7 @@\n #Adam Reimer & Carly Reimer\n\n fib_seq <- c(0, 1)\n-fib_seq[3] <- fib_seq[1] + fib_seq[2]\n-fib_seq[4] <- fib_seq[2] + fib_seq[3]\n-fib_seq[5] <- fib_seq[3] + fib_seq[4]\n-fib_seq[6] <- fib_seq[4] + fib_seq[5]\n-fib_seq[7] <- fib_seq[5] + fib_seq[6]\n-for (i in 8:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n+for (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\n plot(1:50, fib_seq[2:51]/fib_seq[1:50], type = \"l\")\n-{golden_ration <- fib_seq[51]/fib_seq[50]}\n+{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n\nAnd then add and commit the change.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (cleanup)\n$ git add fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (cleanup)\n$ git commit -m \"remove maanual Fibonacci calculations\" -m \"manual calculations become redundent now that we are using recurstion to get the series.\"\n[cleanup 8b28369] remove maanual Fibonacci calculations\n 1 file changed, 2 insertions(+), 7 deletions(-)\n```\n:::\n\n\n### git merge\n\nThe changes above are reasonable and the new feature tried on the `cleanup` branch is useful. In the terminal session below we use `git checkout` to switch back to the `develop` branch,\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (cleanup)\n$ git checkout develop\nSwitched to branch 'develop'\n```\n:::\n\n\n`git merge` to merge the `cleanup` branch with the `develop` branch,\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git merge --no-ff cleanup\nMerge made by the 'ort' strategy.\n fib_seq.R | 9 ++-------\n 1 file changed, 2 insertions(+), 7 deletions(-)\n```\n:::\n\n\nand `git branch` to delete the `cleanup` branch now that its change has been incorporated into `develop`.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git branch -d cleanup\nDeleted branch cleanup (was 8b28369).\n```\n:::\n\n\n#### Merge conflicts\n\nMerge conflicts can occur any time we are merging two branches. In what follows we will intentionally create a merge conflict and fix it. In the terminal session below I create a new branch named `label_plot`, and while working on that branch modify the file `fib_seq.R` by adding informative figure labels and then stage/commit those changes.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git checkout -b label_plot develop\nSwitched to a new branch 'label_plot'\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (label_plot)\n$ git status\nOn branch label_plot\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   fib_seq.R\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (label_plot)\n$ git add fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (label_plot)\n$ git commit -m \"Added axis labels to golden ratio plot.\" -m \"Not a lot to say but hammering home the idea that more informative messages are better. In this case I added labels to demonstrate a merge conflict. Will add different labels to the same file/figure on branch develop to create the conflict.\"\n[label_plot a4c0f61] Added axis labels to golden ratio plot.\n 1 file changed, 4 insertions(+), 1 deletion(-)\n```\n:::\n\n\nA merge into the `develop` branch at this stage would be both appropriate and successful. The new feature was added to the feature branch `label_plot` was a improvement, and the `develop` branch is unchanged. Instead we will intentionally change the develop branch (violating the spirit of Git Flow) to demonstrate a merge conflict. In the terminal session that follows we: checkout the `develop` branch and while working on that branch modified the file `fib_seq.R` by adding less informative figure labels, and stage/commit those changes.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (label_plot)\n$ git checkout develop\nSwitched to branch 'develop'\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   fib_seq.R\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git add fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git commit -m \"Added labels to the golden ratio figure\" -m \"These labels are intentionally less informative that the labels added on the feature branch to demonstrate that feature branches are where you do the work which you then merge into develop.\"\n[develop d0d260e] Added labels to the golden ratio figure\n 1 file changed, 4 insertions(+), 1 deletion(-)\n```\n:::\n\n\nWe then use `git show` to look at the copy of `fib_seq.R` from both the `develop` and `label_plot` branches. Notice that the axis labels from the `label_plot` branch are more informative. Because the values given to the `xlab` and `ylab` arguments were modified in both branches we can expect a merge conflict.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git show develop:fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Number\",\n     ylab = \"Ratio\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git show label_plot:fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n\nAs expected, a merge conflict results from attempting to merge these branches.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git merge --no-ff label_plot\nAuto-merging fib_seq.R\nCONFLICT (content): Merge conflict in fib_seq.R\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n:::\n\n\nWhen there is a merge conflict Git modifies the file being merged to help the user decide how to proceed. Git adds `<<<<<<< HEAD` above the merge conflict. The text `======` separates the merge conflict into code derived from each branch. Code between `<<<<<< HEAD` and `======` indicates code which was present in the branch being merged into (`develop` in this case) while code between `======` and `>>>>>> label_plot` indicates code which was present in the branch being merged (`label_plot` in this case). I've shown what that `fib_seq.R` file in my working directory looks like using the terminal command `cat,` but that is only for demonstrative purposes. Normally, I would just open the file in RStudio, and it would look exactly the same. To proceed the user has to decide which code to keep, save the modified file, and stage/commit the changes. For this example I deleted everything between `<<<<<< HEAD` and `======` inclusive as well as the line `>>>>>> label_plot`. These deletions modified the file `fib_seq.R` to represent the version we wish to retain.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop|MERGING)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n<<<<<< HEAD\n     type = \"l\",\n     xlab = \"Number\",\n     ylab = \"Ratio\")\n======\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n>>>>>> label_plot\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n\nNotice that `git status` knows we need to fix this merge conflict and tells us how to do it.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop|MERGING)\n$ git status\nOn branch develop\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n        both modified:   fib_seq.R\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop|MERGING)\n$ git add fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop|MERGING)\n$ git commit -m \"fixed merge conflict by accepting changes from label_plot branch\" -m \"Mmaybe the only good example of a situation were a description is not nessesary.\"\n[develop ad2149a] fixed merge conflict by accepting changes from label_plot branch\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nnothing to commit, working tree clean\n```\n:::\n\n\n### \n",
    "supporting": [
      "branch_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}