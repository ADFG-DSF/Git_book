{
  "hash": "679983727ce91c5da25f4400c82ee400",
  "result": {
    "markdown": "## Interacting with your Git history  {#sec-history}\n\n\n::: {.cell}\n\n:::\n\n\n### Restoring a previous version of a file\n\nYou can also use `git checkout` to recall a single file from a previous commit. In the terminal sequence below I use `cat` and `git show` to show that the file in my work directory and the file in the most recent commit to the `develop` branch are the same file. Notice a call to `git status` reports the same thing without showing the files explicitly.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git show develop:fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nnothing to commit, working tree clean\n```\n:::\n\n\nTo retrieve a specific file from a prior commit you have to provide `git checkout` with identifying information for the commit and the file name. You can specify the appropriate commit with a absolute or relative reference. For an absolute reference provide the SHA #. For a relative reference the shorthand is HEAD\\~# where \\# is the number of commits prior to the latest commit. In the terminal sequence below I used checkout to retrieve a copy of `fib_seq.R` from 1 commit earlier (recall this commit had the less informative x and y axis labels). Notice the earlier version of `fib_seq.R` was present in my working directory (as shown in the output for `cat`) but was not included in the latest commit to my repository (as shown in the output to `git show`). If I wanted the earlier version of `fib_seq.R` to be associated with the most recent commit to my repository I would need to commit the file. In this case I did not want to change my repository so I used `git checkout` to go back the the most recent version. I often use this sequence to recall all or part of a code from a prior commit.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git checkout HEAD~1 fib_seq.R\nUpdated 1 path from abb8fba\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Number\",\n     ylab = \"Ratio\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git show develop:fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git checkout HEAD fib_seq.R\nUpdated 1 path from bd65128\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n\n### Retrieving a prior commit\n\nYet another use of `git checkout` is to recall a previous commit in its entirety. Since our repository only has one file, I created, staged, and committed a second file named `test.R` to demonstrate this functionality. In the terminal sequence below I show the contents of `test.R` and some now familiar content where I check the status of my repository and stage/commit the new file.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat test.R\n#Blank file to see if we can use git checkout to retrieve an entire commit.\n#Proof would be seeing this file and the correct version of fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        test.R\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git add test.R\n```\n:::\n\n::: {.cell}\n\n```{.develop .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git commit -m \"Test.R file added. Used to test that git checkout recalls an entire commit\" -m \"added a second file so to verify both files come when I jump around commits.\"\n[develop 4ef90af] Test.R file added. Used to test that git checkout recalls an entire commit\n 1 file changed, 2 insertions(+)\n create mode 100644 test.R\n```\n:::\n\n\nTo retrieve a prior commit you should create a new branch to house the past commit until you decide what to do with it. While not strictly necessary, creating a new branch is stable and protects your `develop` branch. In the terminal session below I use `git checkout` to create a new branch called `old_state` and fill it with the snapshot of the `develop` branch from 2 commits earlier. I am expecting old state to be missing `test.R` and have the less descriptive axis locations in the version of `fib_seq.R`. Two calls to `cat` confirm that my working directory does not contain `test.R` and has the older version of `fib_seq.R`\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git checkout -b old_state HEAD~2\nSwitched to a new branch 'old_state'\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (old_state)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Number\",\n     ylab = \"Ratio\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (old_state)\n$ cat test.R\ncat: test.R: No such file or directory\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (old_state)\n$ git status\nOn branch old_state\nnothing to commit, working tree clean\n```\n:::\n\n\nThe next action depends on if you want the keep working on the prior commit. If you do you can modify files and stage/commit the result as appropriate prior to merging `old_state` back into `develop`. Since you purposely started the `old_state` feature branch from a prior version of `develop` the odds of a merge conflict are high. It does mean it's a terrible idea but you should be doing this with intention. In the terminal session below I decided the prior commit was not an improvement on my original commit so I moved back to the `develop` branch and deleted the `old_state` branch. Two calls to `cat` prove that the original files were returned.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (old_state)\n$ git checkout develop\nSwitched to branch 'develop'\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat test.R\n#Blank file to see if we can use git checkout to retrieve an entire commit.\n#Proof would be seeing this file and the correct version of fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git branch -d old_state\nDeleted branch old_state (was d0d260e).\n```\n:::\n\n\n### Deleting/Reversing a commit\n\nThere are two ways to reverse a commit. The version you should choose depends on if you have pushed the commit to a remote repository.\n\n#### Deleting a local commit\n\nWhen the bad commit is local you can us `git reset` to delete the commit. The commit will disappear from your history. To demonstrate this command I modified the `fib_seq.R` by adding an inconsequential comment at the bottom of the file and used the `cat` command to show the file. After adding and committing the file a call to `git log` shows that the commit was recorded.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n\n#Useless comment to demonstrate how to delete a commit\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git add fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git commit -m \"bad commit, plan to delete\" -m \"This commit has one change, a useless comment added to the fib_seq.R file. Plan to reset the HEAD to delete the commit\"\n[develop ae2fe59] bad commit, plan to delete\n 1 file changed, 2 insertions(+)\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git log --oneline\nae2fe59 (HEAD -> develop) bad commit, plan to delete\n4ef90af Test.R file added. Used to test that git checkout recalls an entire commit\nad2149a fixed merge conflict by accepting changes from label_plot branch\nd0d260e Added labels to the golden ratio figure\na4c0f61 Added axis labels to golden ratio plot.\neb216a6 Merge branch 'cleanup' into develop\n8b28369 remove maanual Fibonacci calculations\n22dcfea (origin/main, main) Merge pull request #2 from carlyreimer/main\nf811c50 Update fib_seq.R\nedbaafa Update fib_seq.R\nac48c12 Finally added a for loop and golden ratio estimate\nf732cdb Seventh Fibonacci number\n9db5478 Sixth number in the Fibonacci seqence\n5139049 Fifth entry in the Fibonacci sequence\n0c92881 Fourth entry in the Fibonacci sequence\n3bb6c98 Third entry in fib_seq\ne17181f Initialize Fibonacci sequence\n```\n:::\n\n\nIn the terminal session below I use `git reset` to reset my local repository to 1 commit prior to the most recent commit. Notice that the comment I added to the most recent commit is no longer a part of the `fib_seq.R` file and that the commit `ae2fe59d44eec001b949c3677f94f78e0c30a216` has been removed for the repository. The important thing to note is `git reset` changes the repository history. If you are working locally this is OK but if you have already pushed the bad commit to a remote then deleting a part of your history will cause problems for collaborators who pulled the original history.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git reset HEAD~1 --hard\nHEAD is now at 4ef90af Test.R file added. Used to test that git checkout recalls an entire commit\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ cat fib_seq.R\n#Create a Fibonacci sequence to practice git operations\n#Adam Reimer & Carly Reimer\n\nfib_seq <- c(0, 1)\nfor (i in 3:51) fib_seq[i] <- sum(fib_seq[(i-1):(i-2)])\n\nplot(1:50, fib_seq[2:51]/fib_seq[1:50],\n     type = \"l\",\n     xlab = \"Fibonacci Number in Denominator\",\n     ylab = \"Ratio Between Succesive Fibonacci Numbers\")\n{golden_ratio <- fib_seq[51]/fib_seq[50]}\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git log --oneline\n4ef90af (HEAD -> develop) Test.R file added. Used to test that git checkout recalls an entire commit\nad2149a fixed merge conflict by accepting changes from label_plot branch\nd0d260e Added labels to the golden ratio figure\na4c0f61 Added axis labels to golden ratio plot.\neb216a6 Merge branch 'cleanup' into develop\n8b28369 remove maanual Fibonacci calculations\n22dcfea (origin/main, main) Merge pull request #2 from carlyreimer/main\nf811c50 Update fib_seq.R\nedbaafa Update fib_seq.R\nac48c12 Finally added a for loop and golden ratio estimate\nf732cdb Seventh Fibonacci number\n9db5478 Sixth number in the Fibonacci seqence\n5139049 Fifth entry in the Fibonacci sequence\n0c92881 Fourth entry in the Fibonacci sequence\n3bb6c98 Third entry in fib_seq\ne17181f Initialize Fibonacci sequence\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nnothing to commit, working tree clean\n```\n:::\n\n\n#### Reversing a local/remote commit\n\nBecause revising your history in a public repository is bad collaboration Git has devised a solution. The `git revert` command can also be used to undo a mistaken commit but it does so in a very deliberate way... by creating a new commit that exactly undoes the prior commit. This method provides a stable Git history to your collaborators. In the git session below I modified the `fib_seq.R` again (with an inconsequential comment) and added/committed the change. `git log` shows the new commit.\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   fib_seq.R\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git add fib_seq.R\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git commit -m \"bad commit, plan to revert\" -m \"This commit has one change, a useless comment added to the fib_seq.R file. Plan to revert the commit\"\"\n> \"\n[develop a0c849e] bad commit, plan to revert\n 1 file changed, 2 insertions(+)\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git log --oneline\na0c849e (HEAD -> develop) bad commit, plan to revert\n4ef90af Test.R file added. Used to test that git checkout recalls an entire commit\nad2149a fixed merge conflict by accepting changes from label_plot branch\nd0d260e Added labels to the golden ratio figure\na4c0f61 Added axis labels to golden ratio plot.\neb216a6 Merge branch 'cleanup' into develop\n8b28369 remove maanual Fibonacci calculations\n22dcfea (origin/main, main) Merge pull request #2 from carlyreimer/main\nf811c50 Update fib_seq.R\nedbaafa Update fib_seq.R\nac48c12 Finally added a for loop and golden ratio estimate\nf732cdb Seventh Fibonacci number\n9db5478 Sixth number in the Fibonacci seqence\n5139049 Fifth entry in the Fibonacci sequence\n0c92881 Fourth entry in the Fibonacci sequence\n3bb6c98 Third entry in fib_seq\ne17181f Initialize Fibonacci sequence\n```\n:::\n\n\nUsing `git revert` I specify the short SHA id from the prior commit. The call to `git log` shows that a new commit was added with a message specifying the commit reverted the commit titled \"bad commit, plan to revert\".\n\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git revert a0c849e\n[develop 6466f85] Revert commit titled: \"bad commit, plan to revert\"\n 1 file changed, 2 deletions(-)\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git log --oneline\n6466f85 (HEAD -> develop) Revert commit titled: \"bad commit, plan to revert\"\na0c849e bad commit, plan to revert\n4ef90af Test.R file added. Used to test that git checkout recalls an entire commit\nad2149a fixed merge conflict by accepting changes from label_plot branch\nd0d260e Added labels to the golden ratio figure\na4c0f61 Added axis labels to golden ratio plot.\neb216a6 Merge branch 'cleanup' into develop\n8b28369 remove maanual Fibonacci calculations\n22dcfea (origin/main, main) Merge pull request #2 from carlyreimer/main\nf811c50 Update fib_seq.R\nedbaafa Update fib_seq.R\nac48c12 Finally added a for loop and golden ratio estimate\nf732cdb Seventh Fibonacci number\n9db5478 Sixth number in the Fibonacci seqence\n5139049 Fifth entry in the Fibonacci sequence\n0c92881 Fourth entry in the Fibonacci sequence\n3bb6c98 Third entry in fib_seq\ne17181f Initialize Fibonacci sequence\n```\n:::\n\n::: {.cell}\n\n```{.default .cell-code}\namreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice (develop)\n$ git status\nOn branch develop\nnothing to commit, working tree clean\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}