## Advanced Git Workflow

{{< include _functions.qmd >}}

Advanced Git workflows introduce some new concepts like reverting to a previous version and several skill which can help a researcher develop models/analysis including branching, merging and branch strategies. These concepts are likely overkill for simple analysis but can because very helpful for large projects.

### git checkout (HEAD\~# or SHA key)

To recall a previous commit use git checkout and provide the SHA for the commit you wish to recall. You will receive and error message telling you GIT is in a detached HEAD state which simply means GIT is confused on which commit it should be considering the most recent; the commit you checked out or the last commit you made. Git tells you how to navigate this condition. If you only want to see the old code but not use it you can do that and simple checkout the most recent commit when you are done. I you want to revert to the old code the correct technique is to create a new branch and merge it back with the old branch accepting the code form each branch.

While making this book I realized I may have inadvertently deleted a file I need. In the terminal sequence below shows how I repaired that problem. First I used `git checkout` to revert to my work space during the last commit (HEAD\~1 is shorthand for 1 commit prior). I cut and pasted the files I needed, they magically appeared in my working directory because I had add/committed them earlier, and attempted `git switch` to reverted back to the most recent commit. This didn't work so I tried `git checkout 57ba5a3d` which allowed me to explicitly state the commit I wanted to go to using the SHA key `57ba5a3d`, which also failed to work. At that point I shut down all files/windows that referenced anything to do with this project (this is a common problem with Git... something to do with Windows only allowing one application to access each file at a time. After that I was able to checkout the most current commit and reattach the head.

```{default}
amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/Git_book (master)
$ git checkout HEAD~1
Updating files: 100% (30/30), done.
Note: switching to 'Head~1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 27bd7c8 Initial commit

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/Git_book ((27bd7c8...))
$ git switch -
error: cannot stat '_book/collaboration_files': Permission denied
error: cannot stat '_book/collaboration_files': Permission denied

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/Git_book ((27bd7c8...))
$ git checkout 57ba5a3d
error: cannot stat '_book/collaboration_files': Permission denied
error: cannot stat '_book/collaboration_files': Permission denied

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/Git_book ((27bd7c8...))
$ git status
HEAD detached at 27bd7c8
nothing to commit, working tree clean

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/Git_book ((27bd7c8...))
$ git checkout 57ba5a3d
Updating files: 100% (30/30), done.
Previous HEAD position was 27bd7c8 Initial commit
HEAD is now at 57ba5a3 draft collab chapter/general updates

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/Git_book ((57ba5a3...))
$ git status
HEAD detached at 57ba5a3
nothing to commit, working tree clean

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/Git_book ((57ba5a3...))
$ git checkout master
Switched to branch 'master'
```

```{r}
#| echo: false 
#| message: false 
#| warning: false
#| label: fig-push
#| fig-cap: The Git workspace after checkout of a prior commit. 
#| fig-height: 5 

plot_git(c(1, 3, 3, 3, 3, 4, 4, 4, 4), 
         data.frame(x = 2.8, y =  3, xend = 1.12, yend = 5),
         changes = TRUE, 
         checkout = TRUE)
```

### git checkout -b new_branch_name old_branch-name

I like to think of branches as a line of model development. A best practice is to create a new branch any time you are experimenting with a new feature that you are not sure you want/need or that you think may take several commits to complete.
