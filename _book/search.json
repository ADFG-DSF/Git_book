[
  {
    "objectID": "RStudio.html#section",
    "href": "RStudio.html#section",
    "title": "Appendix A — The RStudio Graphical User Interface",
    "section": "A.1 ",
    "text": "A.1"
  },
  {
    "objectID": "collaboration.html#advanced-git-workflow",
    "href": "collaboration.html#advanced-git-workflow",
    "title": "3  Collaboration Using Git",
    "section": "3.1 Advanced Git Workflow",
    "text": "3.1 Advanced Git Workflow\nAdvanced Git workflows introduce some new concepts like reverting to a previous version, branching, merging, merge conflicts and model development. These concepts are likely overkill for simple analysis but can because very helpful for large projects.\n\n3.1.1 git checkout\nTo recall a previous commit use git checkout and provide the SHA for the commit you wish to recall. You will receive and error message telling your GIT is in a detached HEAD state which simply means GIT is confused on which commit it should be considering the most recent; the commit you just checked out or the last commit you made. Git tells you how to navigate this condition. If you only want to see the old code but not use it you can do that and simple checkout the most recent commit when you are done. I rarely do that… if all I wanted to do was see the changes I would use the GUI. I you want to revert to the old code the correct technique is to crate a new branch and merge it back with the old branch accepting the code form each branch ."
  },
  {
    "objectID": "collaboration.html#when-to-tag",
    "href": "collaboration.html#when-to-tag",
    "title": "3  Collaboration Using Git",
    "section": "3.2 When to Tag?",
    "text": "3.2 When to Tag?\nTags are designed to highlight particularity important commits. Commits which include snapshots of he analysis at the point it was published should definitely be tagged. The analyst can choose what other commits are worthy of a tag. Any time the results are presented to others would be a reasonable suggestion (in-house presentations/updates, conference presentations, exc.), although it is possible to record those milestones in the first part of the commit message."
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "2  The Basic Git Workflow",
    "section": "",
    "text": "One problem with widespread adoption of Git at ADF&G is that there is no accepted standard for how to interact with Git. The options are GUI or shell/terminal. Shell/terminal is probably the best, if most intimidating. Everything you need to do can be done in the terminal and I’ll demonstrate that for the most important commands in the text that follows. In order to use the terminal effectively it helps to make one change to the Rstudio defaults by executing the following point and click commands: Tools>Terminal>Terminal Options…>(change initial directory to ‘project directory’). This change will ensure your terminal opens in the correct directory and save some unnecessary terminal prompts.\nThat said, Rstudio has a very rudimentary Git GUI that can save a lot of keystrokes for some simple commands. For this reason it’s my opinion that a combination of the terminal and the Rstudio GUi is the easiest approach. I will point out appropriate Rstudio GUI options when appropriate.\n\n2.0.1 git init\nIf you have an existing Rstudio project1 that needs to become a git repository git init is the appropriate command. In the example below I have a Rstudio project in a folder names “git_practice” on my c drive. In the terminal sequence below I: 1)verify my directory is not a git repository with git status, 2) make is a git repository with git init, 3) verify the directory is now a git repository with git status.\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice\n$ git status\nfatal: not a git repository (or any of the parent directories): .git\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice\n$ git init\nInitialized empty Git repository in C:/git_practice/.git/\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice (master)\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        .Rproj.user/\n        git_practice.Rproj\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nConversely, if you are starting a brand new analysis creating a git repository at the same time you create your R studio project is easy: New Project>New Directory>New Project>(provide name, location and check ‘create git repository’. This sequence runs git init in the background. I’ve executed those commands to create a new Rstudio project on my c drive names “git_practice_R”. Let’s check if it is a git repository.\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice_R (master)\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        .gitignore\n        git_practice_R.Rproj\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nThe git init command creates a git repository in your project directory. At this point the repository is empty, but the git workflow has been enabled which will allow us to commit to the repository in the future. The arrow indicates your analysis has moved into the git workspace and now sits in your working directory.\n\n\n\n\n\nThe git init command\n\n\n\n\n\n\n2.0.2 git add\nIn the git status response above 2 files were noted that could be added to the repository. Before we do that let’s create third file names fib_seq.R which contains nothing but the vector c(1, 1). In the terminal sequence below I: 1) view which files need to be added with git status, 2) add each file one at a time with git add, 3) verify all files have been added with git status.\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice (master)\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        .gitignore\n        fib_seq.R\n        git_practice.Rproj\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice (master)\n$ git add .gitignore\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice (master)\n$ git add fib_seq.R\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice (master)\n$ git add git_practice.Rproj\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice (master)\n$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   .gitignore\n        new file:   fib_seq.R\n        new file:   git_practice.Rproj\nThe Rstudio GUI makes this easier. You simply open the git pane and click the radio button next to each file you would like to add (under the staged column). You can verify Rstudio stage and git add do the same thing but running the it status command in the terminal.\nInput screenshot.\nUse of git add stages files you would like to track for inclusion in your git repository. The arrow indicates that files withing your working directory were moved into the staging area.\n\n\n\n\n\nThe git add command\n\n\n\n\nOn occasion there are files in your working directory which you do not want Git to track. If you don’t add them they will not get tracked but it can also be cumbersome to have a long list of files which Git recognizes as present in your working directory but you are not actively tracking. The solution is to pen the file .gitignore and add the files you don’t want to track line by line. You can use wildcards if you prefer not to track all files of a certain type and or specify folders i f you don’t want to track anything inn certain sub-directories.\n\n\n2.0.3 git commit\nIn the git status response above 3 files were staged. Let’s commit those files in the terminal.\n$ git commit -m \"inital commit\" -m \"started a fibinochi sequence for latter change/commit example\"\n[master (root-commit) 046e2e8] inital commit\n 3 files changed, 18 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 fib_seq.R\n create mode 100644 git_practice.Rproj\n\namreimer@DFGSXQDSF223076 MINGW64 /c/git_practice (master)\n$ git log\ncommit 046e2e85b1bfa1d7c4196cf763c4228519b5181b (HEAD -> master)\nAuthor: Adam Reimer <adam.reimer@alaska.gov>\nDate:   Sat Jun 24 10:17:10 2023 -0800\n\n    inital commit\n\n    started a fibinochi sequence for latter change/commit example\nIn the terminal sequence above I commit all three staged files with a single line of code. Notice the commit message is broken into 2 parts. the first part is called the title. This title should be brief (limited to xx characters) as it will be included on most commit summaries and it’s nice if the whole message shows up in the limit space provided for it. The second message is called the detail and can be longer. The detail is still limited to yy characters so be terse but this is the place to provide some explanation beyond what you can capture in the title. Both messages can be seen in the git log.\nAgain, this process can be quite efficiently accomplished in the Rstudio GUI.\nInput screenshot.\nUse of git commit places records the snapshot of your stages files into your local repository. The arrow indicates that staged files withing your working directory are not recorded in their present state within your local repository.\n\n\n\n\n\nThe git commit command\n\n\n\n\nThe git workflow described so far forms the bases on reproducible research using Git. If additional changes are made and saved the the working directory your Git workspace will look something like:\n\n\n\n\n\nThose changes are then added:\n\n\n\n\n\nAnd then committed:\n\n\n\n\n\nAnd this cycle will repeat many times:\n\n\n\n\n\n\n2.0.3.1 When to Commit?\nSaves and a commits serve different purposes. As we all know, save can and should be used frequently… many times an hour and/or any time you are stepping away from your work. This use is agnostic to whether the analysis is using a traditional or git workflow.\nIn contrast, commits are made for two reasons. First, a commit should be made whenever the analysis is at a point which you may want to revisit. Examples include; adding new data, adding a new component to the analysis, or any time the code was run and the results were distributed. Any one of these tasks may have resulted in a new ‘version’ in the traditional workflow but they don’t have to be major updates. The commit may also snapshot the code halfway through a new feature, at significant steps in a new features development, or prior to experimenting with a new feature. These commits allow you to revert back to the previous code in the event the new feature is not an improvement. An example commit message in these situations could look something like:\nage-at-maturity trend\n\nallow for temporal trend in age at maturity using logistic regression w a year covariate.\nA second reason to commit is when the changes are substantive enough that the line-by-line change may be difficult to track if you did not commit until the new data/feature are complete. An example would be a run reconstruction project where you have multiple data sources and associated data entry formatting codes associated with each. A mid-process commit message in that scenario could be something like:\npartial add 2024 data\n\ninriver harvest and netting added and changed to rectangular format. Need to add marine harvest and all index of abundacne data\nThe most important thing to note regarding commit messages is that, unlike save, there is no temporal component. While saves are designed to minimize the risk of lost work and should be frequent in time, commits are designed to record importance stages of the analysis and commits should be frequent with respect to progress. A difficult feature may take days to code but represent a single commit, provided the actual changes to the code are modest. Efficiency in commit frequency pay off when the repository is being revisited at a later date.\n\n\n2.0.3.2 How to View Differences Between Commits\nTo view differences between commits the GUIs really outperform the terminal, so much so I wont show git diff in this document. In Rstudio, we view the commit differnces through the git tab (Diff>Changes). Color coding is used to emphasizes line by line changes, with green representing new code and red representing the code it replaced.\nScreenshot\n\n\n\n2.0.4 git log\nThe veiw our commit history in the terminal use git log. The advantage to using git log is that both the title and detail message for each commit are shown. To my knowledge the Rstudio GUI only shows the title. There are more powerful GUI’s which show both.\n\nIn Rstudio, we view the commit history through the git tab (Diff>History)\nScreenshot\n\n\n\n\n\n\nside note: if you have an existing project directory that needs to become an Rstudio project the appropriate point and click sequence is New Project>Existing Directory>(provide location)↩︎"
  },
  {
    "objectID": "advanced.html",
    "href": "advanced.html",
    "title": "4  Advanced Git Workflow",
    "section": "",
    "text": "Advanced Git workflows introduce some new concepts like reverting to a previous version, branching, merging, merge conflicts and model development. These concepts are likely overkill for simple analysis but can because very helpful for large projects.\n\n4.0.1 git checkout\nTo recall a previous commit use git checkout and provide the SHA for the commit you wish to recall. You will receive and error message telling your GIT is in a detached HEAD state which simply means GIT is confused on which commit it should be considering the most recent; the commit you just checked out or the last commit you made. Git tells you how to navigate this condition. If you only want to see the old code but not use it you can do that and simple checkout the most recent commit when you are done. I rarely do that… if all I wanted to do was see the changes I would use the GUI. I you want to revert to the old code the correct technique is to crate a new branch and merge it back with the old branch accepting the code form each branch ."
  },
  {
    "objectID": "intro.html#what-does-git-do",
    "href": "intro.html#what-does-git-do",
    "title": "1  Introduction",
    "section": "1.1 What does Git do?",
    "text": "1.1 What does Git do?\nGit offers a way to track changes is your analysis without requiring the analyst to create different versions of the same file. To use git an analyst initializes their working directory (hopefully an R project). Files involved in the analysis (data, scripts, functions, model code) are added to the ask git to track changes associated with each file. When the analyst makes a commit, a snapshot of all tracked files at a specific point in time are recorded along with a message describing the commit and a automatically assigned a unique identifier. The analysis can also tag important commits. Because you can checkout prior commits this system duplicates file versioning with a structured system while ensuring the all commits are documented and the most important commits are easily identifiable.\nThe collection of all the commits, messages, tags and identifiers associated with a projects is called a repository. When a repository is created on your computer or private/company network it is local. An analyst can push a local repository to a remote repository (stored on the cloud). Alternatively, the analyst can pull a remote repository to their computer or private/company network to either create or update a local repository. Because multiple local repositories can push and pull to the same remote git allows collaboration between analysts which maintains the documentation and unique identifier features. Github is the most popular hosting service facilitating these collaborative features of git."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ADF&G Division of Sport Fisheries Introduction to Git",
    "section": "",
    "text": "Preface\nThe author is aware that each analyst has a different level of expertise and each analysis has different requirements. As the analysis it is up to you to use professional judgment to decide which techniques are useful for the analysis you are conducting. That said, we offer the following general advice.\n\nAs a best practice document we tend to describe appropriate practices for the largest, most complex analysis you are likely to face. If you project is simple, the overhead associated with these techniques may not be justified. Use your professional judgement to discern how to follow the spirit of reproducible research while modification this guidance to specific situations you may encounter. The authors understand that and apply similar discretion in their own work.\nThis document represent the collective experience of XX years of biometrics experience at ADF&G. Our vision is that this is guidance that should be followed closely if you have minimal prior experience. Younger employees introducing and adopting modern research practices is one of the key ways a large agency can keep current over time. Seasoned employees likely have reproducible workflows they are happy with. We would encourage those employees to try some of these techniques on new projects and to migrate existing projects at opportune times and/or prior to transiting a project to an different analyst.\n\nBiometricans with ADF&G Sport fish will be required to store their analysis on github starting in 2024. This means that all operations plans and reports published in 2024 and later will be required to reference a github site and a specific commit where the published analysis is stored."
  }
]