## The Basic Git Workflow

{{< include _functions.qmd >}}

Herein we will focus on learning Git using the Terminal. The terminal is the easiest to demonstrate in a text document and everything you need to do can be done in the terminal. I'll demonstrate the most important commands in the text that follows. In order to use the terminal effectively it helps to make one change to the Rstudio defaults by executing the following point and click commands: *Tools\>Terminal\>Terminal Options...\>(change initial directory to 'project directory')*. This change will ensure your terminal opens in the correct directory and save some unnecessary terminal prompts.

That said, many users find it easier to interact with Git through a graphical user interface (GUI). The most accesible is found in RStudio itself. A Git tab will show up in the Environment/History/Connections/Tutorial window provided your directory is a Git repository. Using a GUI that can save a lot of keystrokes for simple commands and often displays revisions more clearly that they are displayed in the shell. The drawbacks are that some commands can only be completed in the terminal, each GUI different, and point and click commands are difficult to demonstrate in a text document. For this reason, we will focus on the terminal but show how to complete each command in the Rstudio GUI in the appendix. In practice, I tend to work with a combination of the terminal and the Rstudio GUI.

### git init

If you have an existing Rstudio project[^basics-1] that needs to become a git repository git init is the appropriate command. In the example below I have a Rstudio project in a folder named "git_practice_A" on S drive under S:/RTS/Reimer/Research_best_practices. In the terminal, each command line prompt (\$) is proceeded by the username, shell type, and directory location.

[^basics-1]: side note: if you have an existing project directory that needs to become an Rstudio project the appropriate point and click sequence is *New Project\>Existing Directory\>(provide location)*

```{default}
amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A
$
```

The terminal sequence below shows 3 commands and the output recieved after each command: 1) verify the directory is not a git repository with git status, 2) make is a git repository with git init, 3) verify the directory is now a git repository with git status.

```{default}
amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A
$ git status
fatal: not a git repository (or any of the parent directories): .git

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A
$ git init
Initialized empty Git repository in //dfg.alaska.local/DSF/Anchorage/RTS/Reimer/Resear
ch_Best_Practices/git_practice_A/.git/

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A
(master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore
        git_practice_A.Rproj

nothing added to commit but untracked files present (use "git add" to track)

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A
(master)
$
```

The git init command creates a git repository in your project directory. At this point, the repository is empty, but the git workflow has been enabled which will allow us to commit to the repository in the future. The arrow in @fig-init indicates your analysis has moved into the git workspace and now sits in your working directory.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-init
#| fig-cap: The Git workspace after you have initilized an repository.
#| fig-height: 2
plot_git(1, data.frame(x = 0, y =  1, xend = 0.83, yend = 1))
```

### git add

In the git status response above 2 files (`.gitignore` and `git_practice_A.Rproj)` were noted that could be added to the repository. Before we do that let's create third file named fib_seq.R which contains nothing but the vector `c(0, 1)`. The Fibonacci seqence is the sequence created when each value in the sequence is the sum of the 2 previous values in the sequence. We will add to this sequence to practice the use of git. The terminal sequence below shows 5 commands: 1) view which files need to be added with git status, 2) add each file one at a time with git add, 3) verify all files have been added with git status.

```{default}
amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore
        fib_seq.R
        git_practice_A.Rproj

nothing added to commit but untracked files present (use "git add" to track)

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git add .gitignore

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git add fib_seq.R

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git add git_practice_A.Rproj

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   fib_seq.R
        new file:   git_practice_A.Rproj


amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$
```

Use of git add stages files you would like to track for inclusion in your git repository. The arrow in @fig-add indicates that files within your working directory were moved into the staging area.

```{r}
#| echo: false 
#| message: false 
#| warning: false 
#| label: fig-add
#| fig-cap: The Git workspace after you have staged files in your working directory which you intend to add to your local repository.
#| fig-height: 2 
plot_git(c(1, 2), data.frame(x = 1.15, y =  1, xend = 1.85, yend = 1))
```

On occasion there are files in your working directory which you do not want Git to track. If you don't add them they will not get tracked but it can also be cumbersome to have a long list of files which Git recognizes as present in your working directory but you are not actively tracking. The solution is to open the file .gitignore and add the files you don't want to track line by line. You can use wildcards if you prefer not to track all files of a certain type and or specify folders if you don't want to track anything inn certain sub-directories. For example, `*.xlsx` would ignore all .xlsx files in your working directory while `posts/` would ignore all of the files in the folders posts within your working directory.

### git commit

In the git status response above 3 files were staged. Let's commit those files in the terminal.

```{default}
amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   fib_seq.R
        new file:   git_practice_A.Rproj


amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git commit -m "Inital commit" -m "Started a Fibonaccci sequence to practice git"
[master (root-commit) 45bb4b2] Inital commit
 3 files changed, 20 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 fib_seq.R
 create mode 100644 git_practice_A.Rproj

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git status
On branch master
nothing to commit, working tree clean

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git log
commit 45bb4b2a18f07c33bfbe89b7b762008426059409 (HEAD -> master)
Author: Adam Reimer <adam.reimer@alaska.gov>
Date:   Tue Jun 27 13:29:16 2023 -0800

    Inital commit

    Started a Fibonaccci sequence to practice git

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$
```

In the terminal sequence above all three staged files were added to the repository (committed) with a single line of code. Notice the commit message is broken into 2 parts. The first part is called the title or summary while the second part is called the description. A good practice is for the title to be brief (less that 50 characters) so that it displays well in most formats. There is no length limit for the description and this is the place to provide some explanation beyond what you can capture in the title.

```{r}
#| echo: false 
#| message: false 
#| warning: false 
#| label: fig-push
#| fig-cap: The Git workspace after you have committed your staged files to your local repository.
#| fig-height: 2 
plot_git(c(1, 2, 3), data.frame(x = 2.14, y =  1, xend = 2.76, yend = 1))
```

The git workflow described so far forms the basis on reproducible research using Git. In our example we will add single numbers to the Fibonacci sequence to practice this workflow. After a change is made and saved to the working directory your Git workspace will look something like:

```{r}
#| echo: false 
#| message: false 
#| warning: false

plot_git(c(1, 3), changes = TRUE)
```

Those changes are then added:

```{r}
#| echo: false 
#| message: false 
#| warning: false

plot_git(c(1, 2, 3), changes = TRUE)
```

And then committed:

```{r}
#| echo: false 
#| message: false 
#| warning: false 
plot_git(c(1, 2, 3, 3))
```

And this cycle is repeated untill the first 5 numbers of the Fibonacci sequence are calculated:

```{r}
#| echo: false 
#| message: false 
#| warning: false 
#| fig-height: 5 
plot_git(c(1, 2, 3, 3, 3, 3))
```

#### When to Commit?

Saves and a commits serve different purposes. As we all know, save can and should be used frequently... many times an hour and/or any time you are stepping away from your work. This use is agnostic to whether the analysis is using a traditional or git workflow.

In contrast, commits are made for two reasons. First, a commit should be made whenever the analysis is at a point which you may want to revisit. Examples include; adding new data, adding a new component to the analysis, or any time the code was run and the results were distributed. Any one of these tasks may have resulted in a new 'version' in the traditional workflow but they don't have to be major updates. The commit may also snapshot significant steps in a new features development or prior to experimenting with a new feature. These commits allow you to revert back to the previous code in the event the new feature is not an improvement. An example commit message in these situations could look something like:

```{default}
age-at-maturity trend

allow for temporal trend in age at maturity using logistic regression w a year covariate.
```

A second reason to commit is when the changes are substantive enough that the line-by-line change may be difficult to track if you did not commit until the new data/feature are complete. An example would be a run reconstruction project where you have multiple data sources and associated data entry formatting codes associated with each. A mid-process commit message in that scenario could be something like:

```{default}
partial add 2024 data

inriver harvest and netting added and changed to rectangular format. Need to add marine harvest and all index of abundacne data
```

The most important thing to note regarding commit messages is that, unlike save, there is no temporal component. While saves are designed to minimize the risk of lost work and should be frequent *in time*, commits are designed to record importance stages of the analysis and commits should be frequent *with respect to progress*. A difficult feature may take days to code but represent a single commit, provided the actual changes to the code are modest. Efficiency in commit frequency pay off when the repository is being revisited at a later date.

### git log

The view our commit history in the terminal use git log. For this example I have not been including descriptions with my commit messages becaseu the changes were simple enought to describe in the title. That said, not that for the first commit both the commit title and commit descritpption are shown in the log. The advantage to using git log is that both the title and detail message for each commit are shown.

```{default}
amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git log
commit 247d383ead7899fcd3eff2eb5c902ffc314c1d8a (HEAD -> master)
Author: Adam Reimer <adam.reimer@alaska.gov>
Date:   Tue Jun 27 13:51:09 2023 -0800

    fifth number added to Fibonnacci sequence

commit 5c23113e233d4957f72439e0cf5729104817287f
Author: Adam Reimer <adam.reimer@alaska.gov>
Date:   Tue Jun 27 13:50:08 2023 -0800

    forth number added to Fibonnacci sequence

commit 2730310ae971ed325c517fa5e180ebcef7065f5e
Author: Adam Reimer <adam.reimer@alaska.gov>
Date:   Tue Jun 27 13:48:58 2023 -0800

    third number added to Fibonnacci sequence

commit 45bb4b2a18f07c33bfbe89b7b762008426059409
Author: Adam Reimer <adam.reimer@alaska.gov>
Date:   Tue Jun 27 13:29:16 2023 -0800

    Inital commit

    Started a Fibonaccci sequence to practice git

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$
```

### git diff

Ill add one more line to `fib_seq.R` to illustrate how Git shows us line by line changes in a file. In the terminal sequence below there are unstaged changes and git diff was used to see what change was made. The last command reverts back to the previous version of the file.

```{default}
amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   fib_seq.R

no changes added to commit (use "git add" and/or "git commit -a")

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git diff
diff --git a/fib_seq.R b/fib_seq.R
index 0ba340f..7b29418 100644
--- a/fib_seq.R
+++ b/fib_seq.R
@@ -3,4 +3,5 @@
 fib_seq <- c(0, 1)
 fib_seq[3] <- fib_seq[1] + fib_seq[2]
 fib_seq[4] <- fib_seq[2] + fib_seq[3]
-fib_seq[5] <- fib_seq[3] + fib_seq[4]
\ No newline at end of file
+fib_seq[5] <- fib_seq[3] + fib_seq[4]
+fib_seq[6] <- fib_seq[4] + fib_seq[5]
\ No newline at end of file

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$ git restore fib_seq.R

amreimer@DFGSXQDSF206801 MINGW64 /s/RTS/Reimer/Research_Best_Practices/git_practice_A (master)
$
```

Git GUI's are superior to the terminal when looking at line-by line differences but for completeness we will discuss how to read the output. The section `` --- a/fib_seq.R` `` to `+++ b/fib_seq.R` identifies the files that were modified where `--- a/` and `+++ b` refer to the previous and the current versions of the file respectively. The line `@@ -3,4 +3,5 @@` tells us that the output is showing the original file starting on the third line and displaying the the next 4 lines (the three unmarked lines and the line with a negative symbol) while the new version of the file is also shown starting from the third line but displaying the next 5 lines (the three unmarked lines and the two line with a addition symbol). This makes sense because a single line was added to the new version.
